 package assign3;

import java.util.*;

/*
 * Encapsulates a Sudoku grid to be solved.
 * CS108 Stanford.
 */
public class Sudoku {
	// Provided grid data for main/testing
	// The instance variable strategy is up to you.
	
	// Provided easy 1 6 grid
	// (can paste this text into the GUI too)
	public static final int[][] easyGrid = Sudoku.stringsToGrid(
	"1 6 4 0 0 0 0 0 2",
	"2 0 0 4 0 3 9 1 0",
	"0 0 5 0 8 0 4 0 7",
	"0 9 0 0 0 6 5 0 0",
	"5 0 0 1 0 2 0 0 8",
	"0 0 8 9 0 0 0 3 0",
	"8 0 9 0 4 0 2 0 0",
	"0 7 3 5 0 9 0 0 1",
	"4 0 0 0 0 0 6 7 9");
	
	
	// Provided medium 5 3 grid
	public static final int[][] mediumGrid = Sudoku.stringsToGrid(
	 "530070000",
	 "600195000",
	 "098000060",
	 "800060003",
	 "400803001",
	 "700020006",
	 "060000280",
	 "000419005",
	 "000080079");
	
	// Provided hard 3 7 grid
	// 1 solution this way, 6 solutions if the 7 is changed to 0
	public static final int[][] hardGrid = Sudoku.stringsToGrid(
	"3 7 0 0 0 0 0 8 0",
	"0 0 1 0 9 3 0 0 0",
	"0 4 0 7 8 0 0 0 3",
	"0 9 3 8 0 0 0 1 2",
	"0 0 0 0 4 0 0 0 0",
	"5 2 0 0 0 6 7 9 0",
	"6 0 0 0 2 1 0 4 0",
	"0 0 0 5 3 0 9 0 0",
	"0 3 0 0 0 0 0 5 1");
	
	public static final int[][] almostDone = Sudoku.stringsToGrid(
			"3 4 7 6 0 8 9 0 1",
			"5 8 2 9 4 1 0 0 7",
			"9 1 6 3 7 0 2 8 4",
			"1 0 9 4 8 3 7 6 0",
			"8 7 3 0 0 9 4 1 0",
			"0 2 4 7 1 0 3 9 8",
			"4 9 1 0 0 7 8 0 6",
			"0 3 0 8 6 0 1 4 9",
			"2 6 0 1 9 4 0 7 3");
	
	
	public static final int SIZE = 9;  // size of the whole 9x9 puzzle
	public static final int PART = 3;  // size of each 3x3 part
	public static final int MAX_SOLUTIONS = 100;
	private static ArrayList<String> solutionsList;
	private int[][] board;
	private static long start;
	private static long end;
	
	/*	The Spot class corresponds to the various grid elements.
	 *   As you are trying to put the intelligence into the Spots, 
	 *   they should be able to answer questions such as "calculate 
	 *   the possible values you might be set to" and "if I set 
	 *   you to this particular value, will that violate the conditions 
	 *   of Sudoku".  */
	
	/**
	 * A Spot class that stores the coordinates in a Sudoku grid.
	 * Implements compareTo and equals to allow for comparisons
	 * during sorting, based on available options for a given spot
	 * at a given time.
	 * @author KelseyJosund
	 */
	private class Spot implements Comparable<Spot> {
		public int row;
		public int col;
		
		public Spot(int x, int y){
			this.row = x;
			this.col = y;
		}
		
		@Override
		public boolean equals(Object o)
		{
			if(o instanceof Spot){
				Spot spot = (Spot) o;
				if(spot.row == row && spot.col == col) return true;
			}
			return false;
		}
		
		//compares the number of available spots on the Sudoku board
		public int compareTo(Spot other){
			return this.options().size() - other.options().size();
		}
		
		//primarily to help the compareTo method evaluate two Spots relative
		//to each other, this calculates all potential values for a given Spot
		public ArrayList<Integer> options(){
			ArrayList<Integer> options = new ArrayList<Integer>();
			for(int i=1; i<10; i++){
				board[row][col] = i;
				if(rowValid() && colValid() && boxValid()){
					options.add(i);
				}
			}
			//reset curr value
			board[row][col] = 0;
			return options;
		}	
		
		//checks the validity of a row with the given location filled
		//in with a given value
		public boolean rowValid(){
			//adds the new value being considered
			//checks that the value doesn't violate rules for the current row
			for(int c=0; c<board[row].length; c++){
				if(c!=col){
					if(board[row][c]==this.getNum())return false;
				}
			}
			return true;
		}
		
		//checks the validity of a column of the given location filled
		//in with a given value
		public boolean colValid(){
			for(int r=0; r<board.length; r++){
				if(r!=this.row){
					if(board[r][col]==getNum()) return false;
				}
			}
			return true;
		}
		
		//checks the validity of the small box surrounding the location
		//when filled in with a specifec value
		public boolean boxValid(){
			int boxX = (row/3)*3;
			int boxY = (col/3)*3;
			for(int r=boxX; r<boxX+3; r++){
				for(int c = boxY; c<boxY+3; c++){
					if(r!=row || c!=col){
						if(board[r][c]==getNum()) return false;
					}
				}
			}
			return true;
		}
		//the value stored at that location
		public int getNum(){
			return board[row][col];
		}
	}
	
	// Provided various static utility methods to
	// convert data formats to int[][] grid.
	
	/**
	 * Returns a 2-d grid parsed from strings, one string per row.
	 * The "..." is a Java 5 feature that essentially
	 * makes "rows" a String[] array.
	 * (provided utility)
	 * @param rows array of row strings
	 * @return grid
	 */
	public static int[][] stringsToGrid(String... rows) {
		int[][] result = new int[rows.length][];
		for (int row = 0; row<rows.length; row++) {
			result[row] = stringToInts(rows[row]);
		}
		return result;
	}
	
	/**
	 * Given a single string containing 81 numbers, returns a 9x9 grid.
	 * Skips all the non-numbers in the text.
	 * (provided utility)
	 * @param text string of 81 numbers
	 * @return grid
	 */
	public static int[][] textToGrid(String text) throws RuntimeException {
		int[] nums = stringToInts(text);
		if (nums.length != SIZE*SIZE) {
			throw new RuntimeException("Needed 81 numbers, but got:" + nums.length);
		}
		
		int[][] result = new int[SIZE][SIZE];
		int count = 0;
		for (int row = 0; row<SIZE; row++) {
			for (int col=0; col<SIZE; col++) {
				result[row][col] = nums[count];
				count++;
			}
		}
		return result;
	}
	
	/**
	 * Given a string containing digits, like "1 23 4",
	 * returns an int[] of those digits {1 2 3 4}.
	 * (provided utility)
	 * @param string string containing ints
	 * @return array of ints
	 */
	public static int[] stringToInts(String string) {
		int[] a = new int[string.length()];
		int found = 0;
		for (int i=0; i<string.length(); i++) {
			if (Character.isDigit(string.charAt(i))) {
				a[found] = Integer.parseInt(string.substring(i, i+1));
				found++;
			}
		}
		int[] result = new int[found];
		System.arraycopy(a, 0, result, 0, found);
		return result;
	}

	// Provided -- the deliverable main().
	// You can edit to do easier cases, but turn in solving hardGrid.
	public static void main(String[] args) {
		Sudoku sudoku;
		sudoku = new Sudoku(hardGrid);
		
		System.out.println("original");
		System.out.println(sudoku); // print the raw problem
		int count = sudoku.solve();
		System.out.println("solutions:" + count);
		System.out.println("elapsed: " + sudoku.getElapsed() + " milliseconds");
		System.out.println("final");
		System.out.println(sudoku.getSolutionText());
	}	
	
	/**
	 * Sets up based on the given ints.
	 */
	public Sudoku(int[][] ints) {
		board = new int[ints.length][ints[0].length];
		solutionsList = new ArrayList<String>();
		//initialize the underlying board
		for(int i=0; i<ints.length; i++){
			for(int j=0; j<ints[0].length; j++){
				board[i][j] = ints[i][j];
			}
		}
	}
	
	/**
	 * Solves the puzzle, invoking the underlying recursive search.
	 */
	public int solve() {
		ArrayList<Spot> sortedSpots = findOpenSpots();
		start = System.currentTimeMillis();
		recSolve(sortedSpots, 0);
		//to calculate the amount of elapsed time
		end = System.currentTimeMillis();
		return solutionsList.size();
	}
	
	//stores a list of all the Spots not assigned a number already
	private ArrayList<Spot> findOpenSpots(){
		ArrayList<Spot> open = new ArrayList<Spot>();
		for(int i=0; i<board.length; i++){
			for(int j=0; j<board[i].length; j++){
				Spot curr = new Spot(i, j);
				if(curr.getNum() == 0) open.add(curr);
			}
		}
		//sort so appear in order of how many potential options there are
		Collections.sort(open);
		return open;
	}
	
	//recursively checks the board for all locations
	private int recSolve(List<Spot> sorted, int depth){
		//base case
		if(sorted.size()==0){
			solutionsList.add(toString());
			return solutionsList.size();
		}
		Spot curr = sorted.get(0);		
		sorted.remove(0);
		//tries each viable option for the given Spot and continues recursively
		//from each with the board set to the new value
		for(int option: curr.options()){			
			board[curr.row][curr.col] = option;
			if(recSolve(sorted, depth + 1)>0){
				board[curr.row][curr.col] = 0;
				sorted.add(0, curr);
				return solutionsList.size();
			}
		}
		//backtracking
		board[curr.row][curr.col] = 0;
		sorted.add(0, curr);
		return 0;
}
	public String getSolutionText() {
		return solutionsList.get(0);
	}
	
	public long getElapsed() {
		return end - start;
	}
	
	public String solvedBoard(){
		return solutionsList.get(0).toString();
	}
	
	@Override
	public String toString(){
		//initiate the StringBuilder object to hold all elements on a 9x9 board with spaces between then
		StringBuilder build = new StringBuilder(164);
		for(int i=0; i<board.length; i++){
			for(int j=0; j<board[0].length; j++){
				build.append(board[i][j]);
				build.append(" ");
				//move to the next row
				if(j==board[0].length-1) build.append("\n");
			}
		}
		return build.toString();
	}

}
